			Algorithm


if user in login:




			TESTING
				
		

	for f in filelist in UPLOAD_FOLDER:
		f.remove all
	
	filelist = input images for training (max of 2)

	for f in filelist:
		if f in allowedfile(.jpeg.jpg):
			f.save in UPLOAD_FOLDER
		else:
			print(Invalid input format) error
			redirect to (current)
	
	for f in filelist of UPLOAD_FOLDER:
		save their paths in var path
		count++

	for i in range (0,count):
		img_bgr = Cv2.imread(path[i])
		img = convert RGB to GRAY color(img_bgr)

		if (detector(img,1) == 0: 		//detector() is (dlib.get_frontal_face_detector()) is dlib face detector
			print(no face detected)
			redirect to (current)

		if (detector(img,1) > 1:
			print(It contains more than 2 faces) error
			redirect to (current)

		findfaces(image,name of image)
		_ ,img_shapes, _ = find_faces(image,name of the image)
            	store descriptor[i] value of each image  = encode_faces(image, img_shapes)[0]
	save the values in username.npy file and store in train directory





				TRIANING



	videos = input video for testing
        f = videos

        if len(videos) == 1 : //Only one video allowed
        	if not allowed_file(.mp4):
                	print(Invalid Video Format ;Only Mp4 Supported)
			change filename to username.mp4
			save the video file in VIDEO_FOLDER
	else:
		print(more than one input video) error
		redirect to (current)
	
	cap = cv2.VideoCapture( input video path) // if it is realtime put parameter as zero(0)
        	if not cap.isOpened():
                        print(Video cannot Open) error

	calculate video size 
	resize the video and name the saving file

	while True:
		read video frame on by one
		detecting all the faces in the image

		for each face in faces
                        descriptor = calculate the face descriptor of each face

			for desc in descriptor:
				calculate the eucliden distance of desc of and already trained descriptor value	

				if dist < threshold value:
					calculate percent
					find target second

				write on the puttext(percent,target, in video frame)

	relase video()
	calculte the time(second)

	Output video is saved in result directory

	




findface() - Algorithm


	detected faces using function detector()

	for k, d in enumerate(dets):
		
		rect = ((d.left(), d.top()), (d.right(), d.bottom()))
        	rects.append(rect)
		save the corrsponding cordinates

		for i in range(0, 68):
            	shapes_np[k][i] = (shape.part(i).x, shape.part(i).y) //convert the coordinates into numpy array


	





				 
	
		  
		                      


	





	
